{"name": "会员已上传身份证，再次上传身份证", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <autotest.testcases.service_testing.MiniPro.test_uploadThreecard.TestThreecard object at 0x000001BB791159B0>\n\n    @allure.feature('上传三卡')\n    @allure.story('上传身份证')\n    @allure.title('会员已上传身份证，再次上传身份证')\n    @allure.severity('blocker')\n    def test_uploadidcard_0002(self):\n        \"\"\"\n                会员已上传身份证，再次上传身份证\n    \n        \"\"\"\n        print('\\n{}测试开始\\n'.format(self.test_uploadidcard_0001.__name__))\n        #生成系统中不存在的手机号码\n        while True:\n                # 生成手机号码\n                mobile = create_phone()\n                # 校验手机号码是否存在\n                mobilesql = f\"select guid from center_user where login_name={mobile}\"\n                res = self.db.selectsql(mobilesql)\n                if res == ():\n                    break\n        with allure.step(\"step1:上传身份证\"):\n            # 登录小程序\n            self.Minilogin.applogin(2, mobile)\n            guid = self.Minilogin.Guid\n            # 上传身份证\n            res = self.appletfunc.upload_idcard(fakeridcardpicture)\n        with allure.step(\"step2:校验接口返回数据\"):\n            pytest.assume(res['Code'] == 0)\n            pytest.assume(res['Desc'] == '成功')\n            pytest.assume(res['Data'] == '')\n    \n        with allure.step(\"step3:校验数据库数据\"):\n            idcard_audit_sql = f\"SELECT audit_sts,user_idcard_audit_id FROM member_user_idcard_audit where guid={guid} limit 1\"\n            res = self.db.selectsql(idcard_audit_sql)\n            #获取user_idcard_audit_id\n            user_idcard_audit_id=res[0][1]\n            pytest.assume(res[0][0] == 1)\n        with allure.step(\"step4:审核不通过身份证\"):\n>           self.weblogin.login(pq_boss_user)\n\ntestcases\\service_testing\\MiniPro\\test_uploadThreecard.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.login.web_login.Web_Login object at 0x000001BB7941F748>\nphone = '13856565656'\n\n    def login(self, phone=None):\n        # 登录获取返回结果\n        result = labor_weblogin(phone,cf.web_appkey)\n>       self.Guid = result['Guid']\nE       TypeError: 'NoneType' object is not subscriptable\n\ncommon\\login\\web_login.py:16: TypeError"}, "description": "\n                会员已上传身份证，再次上传身份证\n\n        ", "steps": [{"name": "step1:上传身份证", "status": "passed", "start": 1594631311569, "stop": 1594631313063}, {"name": "step2:校验接口返回数据", "status": "passed", "start": 1594631313063, "stop": 1594631313095}, {"name": "step3:校验数据库数据", "status": "passed", "start": 1594631313095, "stop": 1594631313236}, {"name": "step4:审核不通过身份证", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable\n", "trace": "  File \"E:\\study\\python\\autotest\\testcases\\service_testing\\MiniPro\\test_uploadThreecard.py\", line 106, in test_uploadidcard_0002\n    self.weblogin.login(pq_boss_user)\n  File \"E:\\study\\python\\autotest\\common\\login\\web_login.py\", line 16, in login\n    self.Guid = result['Guid']\n"}, "start": 1594631313236, "stop": 1594631315153}], "attachments": [{"name": "log", "source": "5e4219a9-2a6b-4eaf-a6a3-8f2454907ded-attachment.txt", "type": "text/plain"}], "start": 1594631311383, "stop": 1594631315168, "uuid": "e5b6312b-6606-441e-b4ce-f7d14069c2d4", "historyId": "e8302dea0efb27dcc3019adebcc99c08", "testCaseId": "d7d79d05f053de4bb2861a22e165a468", "fullName": "testcases.service_testing.MiniPro.test_uploadThreecard.TestThreecard#test_uploadidcard_0002", "labels": [{"name": "story", "value": "上传身份证"}, {"name": "severity", "value": "blocker"}, {"name": "feature", "value": "上传三卡"}, {"name": "parentSuite", "value": "testcases.service_testing.MiniPro"}, {"name": "suite", "value": "test_uploadThreecard"}, {"name": "subSuite", "value": "TestThreecard"}, {"name": "host", "value": "DESKTOP-9JNMRHP"}, {"name": "thread", "value": "26496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.service_testing.MiniPro.test_uploadThreecard"}]}