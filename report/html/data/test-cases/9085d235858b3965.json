{
  "uid" : "9085d235858b3965",
  "name" : "生成预支名单3",
  "fullName" : "testcases.service_testing.PQ.test_settle_namelist.TestSettleNameList#test_settle_namelist_0003",
  "historyId" : "84149cfeb8c5a6657aa70bc20ff2e897",
  "time" : {
    "start" : 1594631537365,
    "stop" : 1594631569534,
    "duration" : 32169
  },
  "description" : "生成预支名单3",
  "descriptionHtml" : "<p>生成预支名单3</p>\n",
  "status" : "failed",
  "statusMessage" : "pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> TypeError(\"'NoneType' object is not subscriptable\")\n\n1 Failed Assumptions:\n\ntestcases\\service_testing\\PQ\\test_settle_namelist.py:256: AssumptionFailure\n>>\tpytest.assume(res['Data']['RecordCount'] == 1)\nAssertionError: assert False",
  "statusTrace" : "self = <autotest.testcases.service_testing.PQ.test_settle_namelist.TestSettleNameList object at 0x000001BB792C78D0>\nmember_manage = <common.business_func.mem_information_manag_func.Member_information_management_func object at 0x000001BB77E720B8>\nent = ['仁宝电子', 3, '仁宝电子科技（昆山）有限公司', 1]\nname_manage = <common.business_func.namelist.NameList object at 0x000001BB77E72EF0>\norder_manage = <common.business_func.orders.Order object at 0x000001BB77E72240>\ngroup_manage = <common.business_func.group_management.GroupManagement object at 0x000001BB77E72CF8>\nrandom_agent = [22704, '万达洪福人力资源']\nadvance_manage = <common.business_func.advance_management.AdvanceManage object at 0x000001BB77E72A90>\n\n    @allure.feature('可预支名单')\n    @allure.story('生成预支名单')\n    @allure.title('生成预支名单3')\n    @allure.severity('blocker')\n    def test_settle_namelist_0003(self, member_manage, ent, name_manage, order_manage, group_manage, random_agent,\n                                  advance_manage):\n        \"\"\"生成预支名单3\"\"\"\n        with allure.step(\"预置条件：1、会员三卡认证2、工牌认证时间大于等于面试日期3、工牌标准企业和名单企业不对应\"):\n            # 上传身份证\n            self.applet.upload_idcard(fakeridcardpicture)\n            idnum = create_IDCard()\n            name = create_name()\n            # 审核身份证\n            member_manage.audit_idcard(phone=self.mobile, idcardnum=idnum, rname=name)\n            # 获取工种\n            res = group_manage.get_ent_borrow_list(IsEnabled=1, RcrtType=2, EntShortName=ent[0])\n            if res['Data']['RecordCount'] != 0:\n                lst = res['Data']['RecordList']\n                entborrow_dic = lst[random.randint(0, len(lst) - 1)]\n                borrowname = entborrow_dic['EntBorrowName']\n            else:\n                borrowname = ent[0] + '周薪薪'\n                group_manage.add_or_update_ent_borrow(CoopEntName=borrowname, CoopEntId=0, EntId=ent[3], IsEnabled=1,\n                                                      RcrtType=2, Flag=1)\n            # 录入名单\n            name_manage.add_name_pq(entbrorrowname=borrowname, FromSpName=random_agent[1], mobile=self.mobile,\n                                    idnum=idnum, name=name)\n            # 创建订单\n            order_manage.create_order_pq(entbrorrowname=borrowname, ReceiverType=2, PriceUnit=1)\n            # 审核订单\n            order_manage.Judge_Order(auditsts=2, orderid=order_manage.orderid)\n            # 分配订单\n            order_manage.publishOrderToSupplier(agentname=random_agent[1], OrderId=order_manage.orderid)\n    \n            # 上传工牌\n            self.applet.upload_workcard(workCardFile=workCardpicture, entname=ent[0])\n            # 获取和名单不同的标准企业\n            res = group_manage.get_pay_salary_ent_list(RecordSize=100)\n            lst = res['Data']['RecordList']\n            for i in range(100):\n                ent_dic = lst[random.randint(0, len(lst) - 1)]\n                EntShortName = ent_dic['EntShortName']\n                if EntShortName != ent[0]:\n                    break\n            # 审核工牌\n            cardno = create_workcardno()\n            member_manage.audit_workcard(entshortname=EntShortName, workcardno=cardno, phone=self.mobile)\n    \n        with allure.step(\"step1：名单绑定订单，检查预支名单列表\"):\n            # 名单绑定订单\n            name_manage.bind_order(orderid=order_manage.orderid, namelist=[name_manage.newnameid_pq])\n        with allure.step(\"预期结果：生成一条预支名单记录\"):\n            # 等待30s\n            time.sleep(30)\n            # 查询预支名单\n            res = advance_manage.zxx_getNameList(IdCardNum=idnum)\n            pytest.assume(res['Data']['RecordCount'] == 1)\n>           pytest.assume(res['Data']['RecordList'][0]['Mobile'] == self.mobile)\nE           pytest_assume.plugin.FailedAssumption: \nE           Original Failure:\nE           \nE           >> TypeError(\"'NoneType' object is not subscriptable\")\nE           \nE           1 Failed Assumptions:\nE           \nE           testcases\\service_testing\\PQ\\test_settle_namelist.py:256: AssumptionFailure\nE           >>\tpytest.assume(res['Data']['RecordCount'] == 1)\nE           AssertionError: assert False\n\ntestcases\\service_testing\\PQ\\test_settle_namelist.py:257: FailedAssumption",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1594631470010,
      "stop" : 1594631470071,
      "duration" : 61
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "advance_manage",
    "time" : {
      "start" : 1594631470071,
      "stop" : 1594631470071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "name_manage",
    "time" : {
      "start" : 1594631470071,
      "stop" : 1594631470071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "weblogin",
    "time" : {
      "start" : 1594631305945,
      "stop" : 1594631306348,
      "duration" : 403
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "group_manage",
    "time" : {
      "start" : 1594631470071,
      "stop" : 1594631470071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "ent",
    "time" : {
      "start" : 1594631537159,
      "stop" : 1594631537263,
      "duration" : 104
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "order_manage",
    "time" : {
      "start" : 1594631470071,
      "stop" : 1594631470071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "member_manage",
    "time" : {
      "start" : 1594631470071,
      "stop" : 1594631470071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_method",
    "time" : {
      "start" : 1594631536976,
      "stop" : 1594631537159,
      "duration" : 183
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "random_agent",
    "time" : {
      "start" : 1594631537263,
      "stop" : 1594631537365,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "生成预支名单3",
    "status" : "failed",
    "statusMessage" : "pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> TypeError(\"'NoneType' object is not subscriptable\")\n\n1 Failed Assumptions:\n\ntestcases\\service_testing\\PQ\\test_settle_namelist.py:256: AssumptionFailure\n>>\tpytest.assume(res['Data']['RecordCount'] == 1)\nAssertionError: assert False",
    "statusTrace" : "self = <autotest.testcases.service_testing.PQ.test_settle_namelist.TestSettleNameList object at 0x000001BB792C78D0>\nmember_manage = <common.business_func.mem_information_manag_func.Member_information_management_func object at 0x000001BB77E720B8>\nent = ['仁宝电子', 3, '仁宝电子科技（昆山）有限公司', 1]\nname_manage = <common.business_func.namelist.NameList object at 0x000001BB77E72EF0>\norder_manage = <common.business_func.orders.Order object at 0x000001BB77E72240>\ngroup_manage = <common.business_func.group_management.GroupManagement object at 0x000001BB77E72CF8>\nrandom_agent = [22704, '万达洪福人力资源']\nadvance_manage = <common.business_func.advance_management.AdvanceManage object at 0x000001BB77E72A90>\n\n    @allure.feature('可预支名单')\n    @allure.story('生成预支名单')\n    @allure.title('生成预支名单3')\n    @allure.severity('blocker')\n    def test_settle_namelist_0003(self, member_manage, ent, name_manage, order_manage, group_manage, random_agent,\n                                  advance_manage):\n        \"\"\"生成预支名单3\"\"\"\n        with allure.step(\"预置条件：1、会员三卡认证2、工牌认证时间大于等于面试日期3、工牌标准企业和名单企业不对应\"):\n            # 上传身份证\n            self.applet.upload_idcard(fakeridcardpicture)\n            idnum = create_IDCard()\n            name = create_name()\n            # 审核身份证\n            member_manage.audit_idcard(phone=self.mobile, idcardnum=idnum, rname=name)\n            # 获取工种\n            res = group_manage.get_ent_borrow_list(IsEnabled=1, RcrtType=2, EntShortName=ent[0])\n            if res['Data']['RecordCount'] != 0:\n                lst = res['Data']['RecordList']\n                entborrow_dic = lst[random.randint(0, len(lst) - 1)]\n                borrowname = entborrow_dic['EntBorrowName']\n            else:\n                borrowname = ent[0] + '周薪薪'\n                group_manage.add_or_update_ent_borrow(CoopEntName=borrowname, CoopEntId=0, EntId=ent[3], IsEnabled=1,\n                                                      RcrtType=2, Flag=1)\n            # 录入名单\n            name_manage.add_name_pq(entbrorrowname=borrowname, FromSpName=random_agent[1], mobile=self.mobile,\n                                    idnum=idnum, name=name)\n            # 创建订单\n            order_manage.create_order_pq(entbrorrowname=borrowname, ReceiverType=2, PriceUnit=1)\n            # 审核订单\n            order_manage.Judge_Order(auditsts=2, orderid=order_manage.orderid)\n            # 分配订单\n            order_manage.publishOrderToSupplier(agentname=random_agent[1], OrderId=order_manage.orderid)\n    \n            # 上传工牌\n            self.applet.upload_workcard(workCardFile=workCardpicture, entname=ent[0])\n            # 获取和名单不同的标准企业\n            res = group_manage.get_pay_salary_ent_list(RecordSize=100)\n            lst = res['Data']['RecordList']\n            for i in range(100):\n                ent_dic = lst[random.randint(0, len(lst) - 1)]\n                EntShortName = ent_dic['EntShortName']\n                if EntShortName != ent[0]:\n                    break\n            # 审核工牌\n            cardno = create_workcardno()\n            member_manage.audit_workcard(entshortname=EntShortName, workcardno=cardno, phone=self.mobile)\n    \n        with allure.step(\"step1：名单绑定订单，检查预支名单列表\"):\n            # 名单绑定订单\n            name_manage.bind_order(orderid=order_manage.orderid, namelist=[name_manage.newnameid_pq])\n        with allure.step(\"预期结果：生成一条预支名单记录\"):\n            # 等待30s\n            time.sleep(30)\n            # 查询预支名单\n            res = advance_manage.zxx_getNameList(IdCardNum=idnum)\n            pytest.assume(res['Data']['RecordCount'] == 1)\n>           pytest.assume(res['Data']['RecordList'][0]['Mobile'] == self.mobile)\nE           pytest_assume.plugin.FailedAssumption: \nE           Original Failure:\nE           \nE           >> TypeError(\"'NoneType' object is not subscriptable\")\nE           \nE           1 Failed Assumptions:\nE           \nE           testcases\\service_testing\\PQ\\test_settle_namelist.py:256: AssumptionFailure\nE           >>\tpytest.assume(res['Data']['RecordCount'] == 1)\nE           AssertionError: assert False\n\ntestcases\\service_testing\\PQ\\test_settle_namelist.py:257: FailedAssumption",
    "steps" : [ {
      "name" : "预置条件：1、会员三卡认证2、工牌认证时间大于等于面试日期3、工牌标准企业和名单企业不对应",
      "time" : {
        "start" : 1594631537365,
        "stop" : 1594631539284,
        "duration" : 1919
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "step1：名单绑定订单，检查预支名单列表",
      "time" : {
        "start" : 1594631539284,
        "stop" : 1594631539354,
        "duration" : 70
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "预期结果：生成一条预支名单记录",
      "time" : {
        "start" : 1594631539354,
        "stop" : 1594631569534,
        "duration" : 30180
      },
      "status" : "broken",
      "statusMessage" : "TypeError: 'NoneType' object is not subscriptable\n",
      "statusTrace" : "  File \"E:\\study\\python\\autotest\\testcases\\service_testing\\PQ\\test_settle_namelist.py\", line 257, in test_settle_namelist_0003\n    pytest.assume(res['Data']['RecordList'][0]['Mobile'] == self.mobile)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "6354162779700ae7",
      "name" : "log",
      "source" : "6354162779700ae7.txt",
      "type" : "text/plain",
      "size" : 15078
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1594632557036,
      "stop" : 1594632557036,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_method::0",
    "time" : {
      "start" : 1594631569608,
      "stop" : 1594631569608,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "feature",
    "value" : "可预支名单"
  }, {
    "name" : "story",
    "value" : "生成预支名单"
  }, {
    "name" : "parentSuite",
    "value" : "testcases.service_testing.PQ"
  }, {
    "name" : "suite",
    "value" : "test_settle_namelist"
  }, {
    "name" : "subSuite",
    "value" : "TestSettleNameList"
  }, {
    "name" : "host",
    "value" : "DESKTOP-9JNMRHP"
  }, {
    "name" : "thread",
    "value" : "26496-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.service_testing.PQ.test_settle_namelist"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9085d235858b3965.json",
  "parameterValues" : [ ]
}